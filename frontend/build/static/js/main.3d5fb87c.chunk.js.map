{"version":3,"sources":["components/BikeVisualization.js","components/BikeComparisonImage.js","components/BikeComparison.js","App.js","reportWebVitals.js","index.js"],"names":["tableHeaderStyle","padding","borderBottom","fontWeight","textAlign","backgroundColor","tableCellStyle","BikeVisualization","_ref","frame1","stem1","handlebar1","stackHeight1","frame2","stem2","handlebar2","stackHeight2","stems","bestStem","setBestStem","useState","hasValidBikes","degToRad","angle","Math","PI","calculateBarPosition","useCallback","frame","stem","handlebar","stackHeight","effectiveReach","totalDrop","stemEnd","barEnd","headTubeAngle","head_angle","fullStemAngle","stemLength","length","handlebarReach","reach","handlebarDrop","drop","adjustedStackHeight","parseFloat","effectiveStemReach","cos","round","effectiveStemStack","sin","effectiveStack","stack","handlebarVerticalShift","tan","bike1","bike2","findBestStem","closestStem","bestDifference","Number","MAX_VALUE","forEach","testAngle","testStem","testBike2","reachDiff","abs","dropDiff","totalDiff","useEffect","recommended","console","log","React","createElement","style","marginTop","width","margin","borderCollapse","BikeComparisonImage","imageBase64","setImageBase64","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","data","image_base64","catch","err","error","src","alt","maxWidth","border","BikeComparison","frames","setFrames","setStems","handlebars","setHandlebars","selectedFrame1","setSelectedFrame1","selectedStem1","setSelectedStem1","invertStem1","setInvertStem1","selectedHandlebar1","setSelectedHandlebar1","setStackHeight1","selectedFrame2","setSelectedFrame2","selectedStem2","setSelectedStem2","invertStem2","setInvertStem2","selectedHandlebar2","setSelectedHandlebar2","setStackHeight2","axios","get","display","justifyContent","onChange","e","find","f","id","parseInt","target","value","map","key","make","size","selectedStem","s","type","checked","h","bar","placeholder","stem_length","stem_angle","bar_reach","bar_drop","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3d5fb87c.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nconst BikeVisualization = ({\r\n    frame1, stem1, handlebar1, stackHeight1,\r\n    frame2, stem2, handlebar2, stackHeight2,\r\n    stems = []\r\n}) => {\r\n    const [bestStem, setBestStem] = useState(null);\r\n\r\n    const hasValidBikes = frame1 && stem1 && handlebar1 && frame2 && handlebar2;\r\n\r\n    const degToRad = (angle) => (angle * Math.PI) / 180;\r\n\r\n    const calculateBarPosition = useCallback((frame, stem, handlebar, stackHeight) => {\r\n        if (!frame || !stem || !handlebar) return { effectiveReach: 0, totalDrop: 0, stemEnd: [0, 0], barEnd: [0, 0] };\r\n\r\n        const headTubeAngle = 90 - frame.head_angle;\r\n        const fullStemAngle = degToRad(headTubeAngle + stem.angle);\r\n        const stemLength = stem.length;\r\n        const handlebarReach = handlebar.reach;\r\n        const handlebarDrop = handlebar.drop;\r\n        const adjustedStackHeight = parseFloat(stackHeight || 0);\r\n\r\n        const effectiveStemReach = stemLength * Math.cos(fullStemAngle);\r\n        const effectiveReach = Math.round(frame.reach + effectiveStemReach + handlebarReach);\r\n\r\n        const effectiveStemStack = stemLength * Math.sin(fullStemAngle);\r\n        const effectiveStack = Math.round(frame.stack + adjustedStackHeight + effectiveStemStack);\r\n        const handlebarVerticalShift = handlebar.reach * Math.tan(degToRad(headTubeAngle));\r\n        const totalDrop = Math.round(effectiveStack - handlebarDrop - handlebarVerticalShift);\r\n\r\n        const stemEnd = [stemLength * Math.cos(fullStemAngle), adjustedStackHeight + stemLength * Math.sin(fullStemAngle)];\r\n        const barEnd = [stemEnd[0] + handlebarReach, stemEnd[1] - handlebarDrop];\r\n\r\n        return { effectiveReach, totalDrop, stemEnd, barEnd };\r\n    }, []);\r\n\r\n    const bike1 = calculateBarPosition(frame1, stem1, handlebar1, stackHeight1);\r\n    const bike2 = calculateBarPosition(frame2, stem2, handlebar2, stackHeight2);\r\n\r\n    const findBestStem = useCallback(() => {\r\n        if (!frame2 || !handlebar2 || stems.length === 0) return null;\r\n\r\n        let closestStem = null;\r\n        let bestDifference = Number.MAX_VALUE;\r\n\r\n        stems.forEach(stem => {\r\n            [-stem.angle, stem.angle].forEach(testAngle => {\r\n                const testStem = { ...stem, angle: testAngle };\r\n                const testBike2 = calculateBarPosition(frame2, testStem, handlebar2, stackHeight2);\r\n\r\n                const reachDiff = Math.abs(testBike2.effectiveReach - bike1.effectiveReach);\r\n                const dropDiff = Math.abs(testBike2.totalDrop - bike1.totalDrop);\r\n                const totalDiff = reachDiff + dropDiff;\r\n\r\n                if (totalDiff < bestDifference) {\r\n                    bestDifference = totalDiff;\r\n                    closestStem = { ...testStem, reachDiff, dropDiff, totalDiff };\r\n                }\r\n            });\r\n        });\r\n\r\n        return closestStem;\r\n    }, [frame2, handlebar2, stems, stackHeight2, calculateBarPosition, bike1.effectiveReach, bike1.totalDrop]);\r\n\r\n    useEffect(() => {\r\n        if (hasValidBikes) {\r\n            const recommended = findBestStem();\r\n            console.log(\"Recommended Stem:\", recommended);\r\n            setBestStem(recommended);\r\n        }\r\n    }, [findBestStem, hasValidBikes]);\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n            <h3><strong>Bike Geometry Comparison</strong></h3>\r\n\r\n            <table style={{ width: \"60%\", margin: \"0 auto\", borderCollapse: \"collapse\" }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={tableHeaderStyle}></th>\r\n                        <th style={tableHeaderStyle}>Bike 1</th>\r\n                        <th style={tableHeaderStyle}>Bike 2</th>\r\n                        <th style={tableHeaderStyle}>Difference</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td style={tableCellStyle}><strong>Reach</strong></td>\r\n                        <td style={tableCellStyle}>{bike1.effectiveReach} mm</td>\r\n                        <td style={tableCellStyle}>{bike2.effectiveReach} mm</td>\r\n                        <td style={tableCellStyle}><strong>{bike2.effectiveReach - bike1.effectiveReach} mm</strong></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td style={tableCellStyle}><strong>Total Drop</strong></td>\r\n                        <td style={tableCellStyle}>{bike1.totalDrop} mm</td>\r\n                        <td style={tableCellStyle}>{bike2.totalDrop} mm</td>\r\n                        <td style={tableCellStyle}><strong>{bike2.totalDrop - bike1.totalDrop} mm</strong></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst tableHeaderStyle = {\r\n    padding: \"10px\",\r\n    borderBottom: \"2px solid black\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    backgroundColor: \"#f4f4f4\"\r\n};\r\n\r\nconst tableCellStyle = {\r\n    padding: \"10px\",\r\n    borderBottom: \"1px solid #ddd\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nexport default BikeVisualization;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst BikeComparisonImage = ({ bike1, bike2 }) => {\r\n    const [imageBase64, setImageBase64] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!bike1 || !bike2) return;\r\n\r\n        // IMPORTANT: Use backticks around process.env!\r\n        fetch(`${process.env.REACT_APP_API_URL}/geometry-image`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ bike1, bike2 }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setImageBase64(data.image_base64);\r\n            })\r\n            .catch((err) => console.error(\"Error fetching geometry image:\", err));\r\n    }, [bike1, bike2]);\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n            <h3>🖼️ Front-End Geometry Visual</h3>\r\n            {imageBase64 ? (\r\n                <img\r\n                    // Use backticks + interpolation:\r\n                    src={`data:image/png;base64,${imageBase64}`}\r\n                    alt=\"Geometry Comparison\"\r\n                    style={{ maxWidth: \"100%\", border: \"1px solid #ccc\" }}\r\n                />\r\n            ) : (\r\n                <p>Loading geometry image...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BikeComparisonImage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport BikeVisualization from \"./BikeVisualization\";\r\nimport BikeComparisonImage from \"./BikeComparisonImage\";\r\n\r\nconst BikeComparison = () => {\r\n    const [frames, setFrames] = useState([]);\r\n    const [stems, setStems] = useState([]);\r\n    const [handlebars, setHandlebars] = useState([]);\r\n\r\n    // Bike 1 State\r\n    const [selectedFrame1, setSelectedFrame1] = useState(null);\r\n    const [selectedStem1, setSelectedStem1] = useState(null);\r\n    const [invertStem1, setInvertStem1] = useState(false);\r\n    const [selectedHandlebar1, setSelectedHandlebar1] = useState(null);\r\n    const [stackHeight1, setStackHeight1] = useState(\"\");\r\n\r\n    // Bike 2 State\r\n    const [selectedFrame2, setSelectedFrame2] = useState(null);\r\n    const [selectedStem2, setSelectedStem2] = useState(null);\r\n    const [invertStem2, setInvertStem2] = useState(false);\r\n    const [selectedHandlebar2, setSelectedHandlebar2] = useState(null);\r\n    const [stackHeight2, setStackHeight2] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // MUST use backticks here:\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/components/frames`)\r\n            .then((res) => setFrames(res.data))\r\n            .catch((error) => console.error(\"Error fetching frames:\", error));\r\n\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/components/stems`)\r\n            .then((res) => setStems(res.data))\r\n            .catch((error) => console.error(\"Error fetching stems:\", error));\r\n\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/components/handlebars`)\r\n            .then((res) => setHandlebars(res.data))\r\n            .catch((error) => console.error(\"Error fetching handlebars:\", error));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Bike Setup Comparison</h2>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                {/* Bike 1 */}\r\n                <div>\r\n                    <h3>Bike 1 (Blue)</h3>\r\n                    <label>Frame: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedFrame1(frames.find((f) => f.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a frame</option>\r\n                        {frames.map((frame) => (\r\n                            <option key={frame.id} value={frame.id}>\r\n                                {frame.make} - {frame.size}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stem: </label>\r\n                    <select\r\n                        onChange={(e) => {\r\n                            const selectedStem = stems.find((s) => s.id === parseInt(e.target.value));\r\n                            setSelectedStem1(selectedStem);\r\n                        }}\r\n                    >\r\n                        <option value=\"\">Select a stem</option>\r\n                        {stems.map((stem) => (\r\n                            <option key={stem.id} value={stem.id}>\r\n                                {stem.make} - {stem.length}mm, {invertStem1 ? -stem.angle : stem.angle}°\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={invertStem1}\r\n                            onChange={() => setInvertStem1(!invertStem1)}\r\n                        />{\" \"}\r\n                        Invert Stem\r\n                    </label>\r\n                    <br />\r\n\r\n                    <label>Handlebar: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedHandlebar1(handlebars.find((h) => h.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a handlebar</option>\r\n                        {handlebars.map((bar) => (\r\n                            <option key={bar.id} value={bar.id}>\r\n                                {bar.make} - {bar.width}mm, Reach {bar.reach}mm, Drop {bar.drop}mm\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stack Height (mm): </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={stackHeight1}\r\n                        onChange={(e) => setStackHeight1(e.target.value)}\r\n                        placeholder=\"Enter stack height\"\r\n                    />\r\n                </div>\r\n\r\n                {/* Bike 2 */}\r\n                <div>\r\n                    <h3>Bike 2 (Red)</h3>\r\n                    <label>Frame: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedFrame2(frames.find((f) => f.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a frame</option>\r\n                        {frames.map((frame) => (\r\n                            <option key={frame.id} value={frame.id}>\r\n                                {frame.make} - {frame.size}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stem: </label>\r\n                    <select\r\n                        onChange={(e) => {\r\n                            const selectedStem = stems.find((s) => s.id === parseInt(e.target.value));\r\n                            setSelectedStem2(selectedStem);\r\n                        }}\r\n                    >\r\n                        <option value=\"\">Select a stem</option>\r\n                        {stems.map((stem) => (\r\n                            <option key={stem.id} value={stem.id}>\r\n                                {stem.make} - {stem.length}mm, {invertStem2 ? -stem.angle : stem.angle}°\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={invertStem2}\r\n                            onChange={() => setInvertStem2(!invertStem2)}\r\n                        />{\" \"}\r\n                        Invert Stem\r\n                    </label>\r\n                    <br />\r\n\r\n                    <label>Handlebar: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedHandlebar2(handlebars.find((h) => h.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a handlebar</option>\r\n                        {handlebars.map((bar) => (\r\n                            <option key={bar.id} value={bar.id}>\r\n                                {bar.make} - {bar.width}mm, Reach {bar.reach}mm, Drop {bar.drop}mm\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stack Height (mm): </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={stackHeight2}\r\n                        onChange={(e) => setStackHeight2(e.target.value)}\r\n                        placeholder=\"Enter stack height\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* OPTIONAL: If you want the older \"BikeVisualization\" table display. */}\r\n            <BikeVisualization\r\n                frame1={selectedFrame1}\r\n                stem1={\r\n                    selectedStem1\r\n                        ? { ...selectedStem1, angle: invertStem1 ? -selectedStem1.angle : selectedStem1.angle }\r\n                        : null\r\n                }\r\n                handlebar1={selectedHandlebar1}\r\n                stackHeight1={stackHeight1}\r\n                frame2={selectedFrame2}\r\n                stem2={\r\n                    selectedStem2\r\n                        ? { ...selectedStem2, angle: invertStem2 ? -selectedStem2.angle : selectedStem2.angle }\r\n                        : null\r\n                }\r\n                handlebar2={selectedHandlebar2}\r\n                stackHeight2={stackHeight2}\r\n            />\r\n\r\n            {/* The image from the backend */}\r\n            <BikeComparisonImage\r\n                bike1={\r\n                    selectedFrame1 && selectedStem1 && selectedHandlebar1\r\n                        ? {\r\n                              head_angle: selectedFrame1.head_angle,\r\n                              stack: parseFloat(stackHeight1 || 0),\r\n                              stem_length: selectedStem1.length,\r\n                              stem_angle: invertStem1 ? -selectedStem1.angle : selectedStem1.angle,\r\n                              bar_reach: selectedHandlebar1.reach,\r\n                              bar_drop: selectedHandlebar1.drop,\r\n                          }\r\n                        : null\r\n                }\r\n                bike2={\r\n                    selectedFrame2 && selectedStem2 && selectedHandlebar2\r\n                        ? {\r\n                              head_angle: selectedFrame2.head_angle,\r\n                              stack: parseFloat(stackHeight2 || 0),\r\n                              stem_length: selectedStem2.length,\r\n                              stem_angle: invertStem2 ? -selectedStem2.angle : selectedStem2.angle,\r\n                              bar_reach: selectedHandlebar2.reach,\r\n                              bar_drop: selectedHandlebar2.drop,\r\n                          }\r\n                        : null\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BikeComparison;\r\n","import React from \"react\";\nimport BikeComparison from \"./components/BikeComparison\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Bike Comparison Tool</h1>\n            <BikeComparison />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}