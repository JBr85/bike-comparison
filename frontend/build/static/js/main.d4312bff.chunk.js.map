{"version":3,"sources":["components/BikeVisualization.js","components/BikeComparisonImage.js","components/BikeComparison.js","App.js","reportWebVitals.js","index.js"],"names":["tableHeaderStyle","padding","borderBottom","fontWeight","textAlign","backgroundColor","tableCellStyle","BikeVisualization","_ref","frame1","stem1","handlebar1","stackHeight1","frame2","stem2","handlebar2","stackHeight2","degToRad","angle","Math","PI","calculateBarPosition","useCallback","frame","stem","handlebar","stackHeight","effectiveReach","totalDrop","stemEnd","barEnd","headTubeAngle","head_angle","fullStemAngle","stemLength","length","handlebarReach","reach","handlebarDrop","drop","adjustedStackHeight","parseFloat","effectiveStemReach","cos","round","effectiveStemStack","sin","effectiveStack","stack","handlebarVerticalShift","tan","bike1","bike2","React","createElement","style","marginTop","width","margin","borderCollapse","BikeComparisonImage","imageBase64","setImageBase64","useState","useEffect","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","data","image_base64","catch","err","console","error","src","alt","maxWidth","border","BikeComparison","frames","setFrames","stems","setStems","handlebars","setHandlebars","selectedFrame1","setSelectedFrame1","selectedStem1","setSelectedStem1","invertStem1","setInvertStem1","selectedHandlebar1","setSelectedHandlebar1","setStackHeight1","selectedFrame2","setSelectedFrame2","selectedStem2","setSelectedStem2","invertStem2","setInvertStem2","selectedHandlebar2","setSelectedHandlebar2","setStackHeight2","axios","get","display","justifyContent","onChange","e","find","f","id","parseInt","target","value","map","key","make","size","selectedStem","s","type","checked","h","bar","placeholder","stem_length","stem_angle","bar_reach","bar_drop","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d4312bff.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\r\n\r\nconst BikeVisualization = ({\r\n    frame1, stem1, handlebar1, stackHeight1,\r\n    frame2, stem2, handlebar2, stackHeight2\r\n}) => {\r\n    const degToRad = (angle) => (angle * Math.PI) / 180;\r\n\r\n    const calculateBarPosition = useCallback((frame, stem, handlebar, stackHeight) => {\r\n        if (!frame || !stem || !handlebar) {\r\n            return {\r\n                effectiveReach: 0,\r\n                totalDrop: 0,\r\n                stemEnd: [0, 0],\r\n                barEnd: [0, 0]\r\n            };\r\n        }\r\n\r\n        const headTubeAngle = 90 - frame.head_angle;\r\n        const fullStemAngle = degToRad(headTubeAngle + stem.angle);\r\n        const stemLength = stem.length;\r\n        const handlebarReach = handlebar.reach;\r\n        const handlebarDrop = handlebar.drop;\r\n        const adjustedStackHeight = parseFloat(stackHeight || 0);\r\n\r\n        const effectiveStemReach = stemLength * Math.cos(fullStemAngle);\r\n        const effectiveReach = Math.round(frame.reach + effectiveStemReach + handlebarReach);\r\n\r\n        const effectiveStemStack = stemLength * Math.sin(fullStemAngle);\r\n        const effectiveStack = Math.round(frame.stack + adjustedStackHeight + effectiveStemStack);\r\n        const handlebarVerticalShift = handlebar.reach * Math.tan(degToRad(headTubeAngle));\r\n        const totalDrop = Math.round(effectiveStack - handlebarDrop - handlebarVerticalShift);\r\n\r\n        const stemEnd = [\r\n            stemLength * Math.cos(fullStemAngle),\r\n            adjustedStackHeight + stemLength * Math.sin(fullStemAngle)\r\n        ];\r\n        const barEnd = [stemEnd[0] + handlebarReach, stemEnd[1] - handlebarDrop];\r\n\r\n        return { effectiveReach, totalDrop, stemEnd, barEnd };\r\n    }, []);\r\n\r\n    const bike1 = calculateBarPosition(frame1, stem1, handlebar1, stackHeight1);\r\n    const bike2 = calculateBarPosition(frame2, stem2, handlebar2, stackHeight2);\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n            <h3><strong>Bike Geometry Comparison</strong></h3>\r\n            <table style={{ width: \"60%\", margin: \"0 auto\", borderCollapse: \"collapse\" }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={tableHeaderStyle}></th>\r\n                        <th style={tableHeaderStyle}>Bike 1</th>\r\n                        <th style={tableHeaderStyle}>Bike 2</th>\r\n                        <th style={tableHeaderStyle}>Difference</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td style={tableCellStyle}><strong>Reach</strong></td>\r\n                        <td style={tableCellStyle}>{bike1.effectiveReach} mm</td>\r\n                        <td style={tableCellStyle}>{bike2.effectiveReach} mm</td>\r\n                        <td style={tableCellStyle}>\r\n                            <strong>{bike2.effectiveReach - bike1.effectiveReach} mm</strong>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td style={tableCellStyle}><strong>Total Drop</strong></td>\r\n                        <td style={tableCellStyle}>{bike1.totalDrop} mm</td>\r\n                        <td style={tableCellStyle}>{bike2.totalDrop} mm</td>\r\n                        <td style={tableCellStyle}>\r\n                            <strong>{bike2.totalDrop - bike1.totalDrop} mm</strong>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst tableHeaderStyle = {\r\n    padding: \"10px\",\r\n    borderBottom: \"2px solid black\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    backgroundColor: \"#f4f4f4\"\r\n};\r\n\r\nconst tableCellStyle = {\r\n    padding: \"10px\",\r\n    borderBottom: \"1px solid #ddd\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nexport default BikeVisualization;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst BikeComparisonImage = ({ bike1, bike2 }) => {\r\n    const [imageBase64, setImageBase64] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!bike1 || !bike2) return;\r\n\r\n        // IMPORTANT: Use backticks around process.env!\r\n        fetch(`${process.env.REACT_APP_API_URL}/geometry-image`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ bike1, bike2 }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setImageBase64(data.image_base64);\r\n            })\r\n            .catch((err) => console.error(\"Error fetching geometry image:\", err));\r\n    }, [bike1, bike2]);\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n            <h3>🖼️ Front-End Geometry Visual</h3>\r\n            {imageBase64 ? (\r\n                <img\r\n                    // Use backticks + interpolation:\r\n                    src={`data:image/png;base64,${imageBase64}`}\r\n                    alt=\"Geometry Comparison\"\r\n                    style={{ maxWidth: \"100%\", border: \"1px solid #ccc\" }}\r\n                />\r\n            ) : (\r\n                <p>Loading geometry image...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BikeComparisonImage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport BikeVisualization from \"./BikeVisualization\";\r\nimport BikeComparisonImage from \"./BikeComparisonImage\";\r\n\r\nconst BikeComparison = () => {\r\n    const [frames, setFrames] = useState([]);\r\n    const [stems, setStems] = useState([]);\r\n    const [handlebars, setHandlebars] = useState([]);\r\n\r\n    // Bike 1 State\r\n    const [selectedFrame1, setSelectedFrame1] = useState(null);\r\n    const [selectedStem1, setSelectedStem1] = useState(null);\r\n    const [invertStem1, setInvertStem1] = useState(false);\r\n    const [selectedHandlebar1, setSelectedHandlebar1] = useState(null);\r\n    const [stackHeight1, setStackHeight1] = useState(\"\");\r\n\r\n    // Bike 2 State\r\n    const [selectedFrame2, setSelectedFrame2] = useState(null);\r\n    const [selectedStem2, setSelectedStem2] = useState(null);\r\n    const [invertStem2, setInvertStem2] = useState(false);\r\n    const [selectedHandlebar2, setSelectedHandlebar2] = useState(null);\r\n    const [stackHeight2, setStackHeight2] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // MUST use backticks here:\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/components/frames`)\r\n            .then((res) => setFrames(res.data))\r\n            .catch((error) => console.error(\"Error fetching frames:\", error));\r\n\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/components/stems`)\r\n            .then((res) => setStems(res.data))\r\n            .catch((error) => console.error(\"Error fetching stems:\", error));\r\n\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/components/handlebars`)\r\n            .then((res) => setHandlebars(res.data))\r\n            .catch((error) => console.error(\"Error fetching handlebars:\", error));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Bike Setup Comparison</h2>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                {/* Bike 1 */}\r\n                <div>\r\n                    <h3>Bike 1 (Blue)</h3>\r\n                    <label>Frame: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedFrame1(frames.find((f) => f.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a frame</option>\r\n                        {frames.map((frame) => (\r\n                            <option key={frame.id} value={frame.id}>\r\n                                {frame.make} - {frame.size}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stem: </label>\r\n                    <select\r\n                        onChange={(e) => {\r\n                            const selectedStem = stems.find((s) => s.id === parseInt(e.target.value));\r\n                            setSelectedStem1(selectedStem);\r\n                        }}\r\n                    >\r\n                        <option value=\"\">Select a stem</option>\r\n                        {stems.map((stem) => (\r\n                            <option key={stem.id} value={stem.id}>\r\n                                {stem.make} - {stem.length}mm, {invertStem1 ? -stem.angle : stem.angle}°\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={invertStem1}\r\n                            onChange={() => setInvertStem1(!invertStem1)}\r\n                        />{\" \"}\r\n                        Invert Stem\r\n                    </label>\r\n                    <br />\r\n\r\n                    <label>Handlebar: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedHandlebar1(handlebars.find((h) => h.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a handlebar</option>\r\n                        {handlebars.map((bar) => (\r\n                            <option key={bar.id} value={bar.id}>\r\n                                {bar.make} - {bar.width}mm, Reach {bar.reach}mm, Drop {bar.drop}mm\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stack Height (mm): </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={stackHeight1}\r\n                        onChange={(e) => setStackHeight1(e.target.value)}\r\n                        placeholder=\"Enter stack height\"\r\n                    />\r\n                </div>\r\n\r\n                {/* Bike 2 */}\r\n                <div>\r\n                    <h3>Bike 2 (Red)</h3>\r\n                    <label>Frame: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedFrame2(frames.find((f) => f.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a frame</option>\r\n                        {frames.map((frame) => (\r\n                            <option key={frame.id} value={frame.id}>\r\n                                {frame.make} - {frame.size}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stem: </label>\r\n                    <select\r\n                        onChange={(e) => {\r\n                            const selectedStem = stems.find((s) => s.id === parseInt(e.target.value));\r\n                            setSelectedStem2(selectedStem);\r\n                        }}\r\n                    >\r\n                        <option value=\"\">Select a stem</option>\r\n                        {stems.map((stem) => (\r\n                            <option key={stem.id} value={stem.id}>\r\n                                {stem.make} - {stem.length}mm, {invertStem2 ? -stem.angle : stem.angle}°\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={invertStem2}\r\n                            onChange={() => setInvertStem2(!invertStem2)}\r\n                        />{\" \"}\r\n                        Invert Stem\r\n                    </label>\r\n                    <br />\r\n\r\n                    <label>Handlebar: </label>\r\n                    <select\r\n                        onChange={(e) =>\r\n                            setSelectedHandlebar2(handlebars.find((h) => h.id === parseInt(e.target.value)))\r\n                        }\r\n                    >\r\n                        <option value=\"\">Select a handlebar</option>\r\n                        {handlebars.map((bar) => (\r\n                            <option key={bar.id} value={bar.id}>\r\n                                {bar.make} - {bar.width}mm, Reach {bar.reach}mm, Drop {bar.drop}mm\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <br />\r\n\r\n                    <label>Stack Height (mm): </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={stackHeight2}\r\n                        onChange={(e) => setStackHeight2(e.target.value)}\r\n                        placeholder=\"Enter stack height\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* OPTIONAL: If you want the older \"BikeVisualization\" table display. */}\r\n            <BikeVisualization\r\n                frame1={selectedFrame1}\r\n                stem1={\r\n                    selectedStem1\r\n                        ? { ...selectedStem1, angle: invertStem1 ? -selectedStem1.angle : selectedStem1.angle }\r\n                        : null\r\n                }\r\n                handlebar1={selectedHandlebar1}\r\n                stackHeight1={stackHeight1}\r\n                frame2={selectedFrame2}\r\n                stem2={\r\n                    selectedStem2\r\n                        ? { ...selectedStem2, angle: invertStem2 ? -selectedStem2.angle : selectedStem2.angle }\r\n                        : null\r\n                }\r\n                handlebar2={selectedHandlebar2}\r\n                stackHeight2={stackHeight2}\r\n            />\r\n\r\n            {/* The image from the backend */}\r\n            <BikeComparisonImage\r\n                bike1={\r\n                    selectedFrame1 && selectedStem1 && selectedHandlebar1\r\n                        ? {\r\n                              head_angle: selectedFrame1.head_angle,\r\n                              stack: parseFloat(stackHeight1 || 0),\r\n                              stem_length: selectedStem1.length,\r\n                              stem_angle: invertStem1 ? -selectedStem1.angle : selectedStem1.angle,\r\n                              bar_reach: selectedHandlebar1.reach,\r\n                              bar_drop: selectedHandlebar1.drop,\r\n                          }\r\n                        : null\r\n                }\r\n                bike2={\r\n                    selectedFrame2 && selectedStem2 && selectedHandlebar2\r\n                        ? {\r\n                              head_angle: selectedFrame2.head_angle,\r\n                              stack: parseFloat(stackHeight2 || 0),\r\n                              stem_length: selectedStem2.length,\r\n                              stem_angle: invertStem2 ? -selectedStem2.angle : selectedStem2.angle,\r\n                              bar_reach: selectedHandlebar2.reach,\r\n                              bar_drop: selectedHandlebar2.drop,\r\n                          }\r\n                        : null\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BikeComparison;\r\n","import React from \"react\";\nimport BikeComparison from \"./components/BikeComparison\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Bike Comparison Tool</h1>\n            <BikeComparison />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}